// Реализуйте мини-приложение SWAPI Board для отображения информмационных карточек о звёздных кораблях, планетах и сухопутном транспорте из вселенной Звёздных войн. В реализации вам поможет уже знакомое вам открытое АПИ (swapi).

// Для реализации необходимо использовать ES6 Class.

// На странице должна присутвовать форма, в которой присутствует select для выбора типа необходимого вам объекта (звёздный корабль, сухопутное ТС или планета) и input, текстовое поле для ввода айди ресурса.

// При сабмите формы с выбраным типом и заполенным полем айди, отправляется запрос на сервер, и с полученными данными должна отрисоваться карточка на странице.

// Для получения данных вам понадобятся следующие эндпоинты

// https://swapi.dev/api/starships/${id} для кораблей
// https://swapi.dev/api/vehicles/${id} для сухопутного транспорта
// https://swapi.dev/api/planets/${id} для планет
// Карточки для каждого типа сущности должна отрисовать уникальные данные. Для звездных кораблей (starships) это:

// название (name)
// модель (model)
// производитель (manufacturer)
// максимальная скорость (max_atmosphering_speed) Для планет:
// название (name)
// климат (climate)
// поверхность (terrain)
// население (population) Для сухопутного транспорта (vehicles):
// название (name)
// стоимость (cost_in_credits)
// количество человек в команде (crew)
// возможное количество пассажиров (passengers)
// Если неообходимого ресурса с переданным айди не существует, то должен быть показан alert с соответсвующим текстом.

// Каждая карточка должна может быть удалена с доски. Для этого в ней должна присутствовать кнопка-крестик.

// Обязательно должны быть реализованы следующие классы:

// Сard - базовый класс для карточки, cодержит базовую логику отрисовки и удаления карточки.
// PlanetCard, StarshipCard и VehicleCard которые содержат в себе логику рендера необходимых полей для конкретного типа карточки
// API - класс содержащий в себе логику работы с сервером. Должны быть реальзованы методы для получения каждого ресурса и метод для отправки запроса / обработки ошибок.
// Необязательное задание продвинутой сложности: При обновлении страницы / закрытии вкладки, карточки должны сохраняться. То есть, при повторном входе пользователь должен увидеть ту же доску с карточками, что и при последнем визите.